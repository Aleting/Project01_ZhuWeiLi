<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.qut.dao.OrdeMapper">
  <resultMap id="BaseResultMap" type="cn.edu.qut.entity.Orde">
    <id column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="order_number" jdbcType="INTEGER" property="orderNumber" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="order_money" jdbcType="REAL" property="orderMoney" />
    <result column="order_state" jdbcType="VARCHAR" property="orderState" />
    <result column="customer_id" jdbcType="INTEGER" property="customerId" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="store_id" jdbcType="INTEGER" property="storeId" />
    <result column="order_epay_type" jdbcType="VARCHAR" property="orderEpayType" />
    <result column="seller_id" jdbcType="INTEGER" property="sellerId" />
    <result column="order_epay_time" jdbcType="TIMESTAMP" property="orderEpayTime" />
    <result column="customer_login_name" jdbcType="VARCHAR" property="customerLoginName"/>
    <result column="order_time2" jdbcType="TIMESTAMP" property="orderTime2"/>
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    order_id, order_number, order_time, order_money, order_state, customer_id, address, 
    store_id, order_epay_type, seller_id, order_epay_time
  </sql>
  <select id="selectByExample" parameterType="cn.edu.qut.entity.OrdeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from orders
    where order_id = #{orderId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.qut.entity.OrdeExample">
    delete from orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.qut.entity.Orde">
    insert into orders (order_id, order_number, order_time, 
      order_money, order_state, customer_id, 
      address, store_id, order_epay_type, 
      seller_id, order_epay_time)
    values (#{orderId,jdbcType=INTEGER}, #{orderNumber,jdbcType=INTEGER}, #{orderTime,jdbcType=TIMESTAMP}, 
      #{orderMoney,jdbcType=REAL}, #{orderState,jdbcType=VARCHAR}, #{customerId,jdbcType=INTEGER}, 
      #{address,jdbcType=VARCHAR}, #{storeId,jdbcType=INTEGER}, #{orderEpayType,jdbcType=VARCHAR}, 
      #{sellerId,jdbcType=INTEGER}, #{orderEpayTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.qut.entity.Orde">
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="orderNumber != null">
        order_number,
      </if>
      <if test="orderTime != null">
        order_time,
      </if>
      <if test="orderMoney != null">
        order_money,
      </if>
      <if test="orderState != null">
        order_state,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="storeId != null">
        store_id,
      </if>
      <if test="orderEpayType != null">
        order_epay_type,
      </if>
      <if test="sellerId != null">
        seller_id,
      </if>
      <if test="orderEpayTime != null">
        order_epay_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderNumber != null">
        #{orderNumber,jdbcType=INTEGER},
      </if>
      <if test="orderTime != null">
        #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderMoney != null">
        #{orderMoney,jdbcType=REAL},
      </if>
      <if test="orderState != null">
        #{orderState,jdbcType=VARCHAR},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="storeId != null">
        #{storeId,jdbcType=INTEGER},
      </if>
      <if test="orderEpayType != null">
        #{orderEpayType,jdbcType=VARCHAR},
      </if>
      <if test="sellerId != null">
        #{sellerId,jdbcType=INTEGER},
      </if>
      <if test="orderEpayTime != null">
        #{orderEpayTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.qut.entity.OrdeExample" resultType="java.lang.Long">
    select count(*) from orders
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update orders
    <set>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.orderNumber != null">
        order_number = #{record.orderNumber,jdbcType=INTEGER},
      </if>
      <if test="record.orderTime != null">
        order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.orderMoney != null">
        order_money = #{record.orderMoney,jdbcType=REAL},
      </if>
      <if test="record.orderState != null">
        order_state = #{record.orderState,jdbcType=VARCHAR},
      </if>
      <if test="record.customerId != null">
        customer_id = #{record.customerId,jdbcType=INTEGER},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.storeId != null">
        store_id = #{record.storeId,jdbcType=INTEGER},
      </if>
      <if test="record.orderEpayType != null">
        order_epay_type = #{record.orderEpayType,jdbcType=VARCHAR},
      </if>
      <if test="record.sellerId != null">
        seller_id = #{record.sellerId,jdbcType=INTEGER},
      </if>
      <if test="record.orderEpayTime != null">
        order_epay_time = #{record.orderEpayTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update orders
    set order_id = #{record.orderId,jdbcType=INTEGER},
      order_number = #{record.orderNumber,jdbcType=INTEGER},
      order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      order_money = #{record.orderMoney,jdbcType=REAL},
      order_state = #{record.orderState,jdbcType=VARCHAR},
      customer_id = #{record.customerId,jdbcType=INTEGER},
      address = #{record.address,jdbcType=VARCHAR},
      store_id = #{record.storeId,jdbcType=INTEGER},
      order_epay_type = #{record.orderEpayType,jdbcType=VARCHAR},
      seller_id = #{record.sellerId,jdbcType=INTEGER},
      order_epay_time = #{record.orderEpayTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.qut.entity.Orde">
    update orders
    <set>
      <if test="orderNumber != null">
        order_number = #{orderNumber,jdbcType=INTEGER},
      </if>
      <if test="orderTime != null">
        order_time = #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderMoney != null">
        order_money = #{orderMoney,jdbcType=REAL},
      </if>
      <if test="orderState != null">
        order_state = #{orderState,jdbcType=VARCHAR},
      </if>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="storeId != null">
        store_id = #{storeId,jdbcType=INTEGER},
      </if>
      <if test="orderEpayType != null">
        order_epay_type = #{orderEpayType,jdbcType=VARCHAR},
      </if>
      <if test="sellerId != null">
        seller_id = #{sellerId,jdbcType=INTEGER},
      </if>
      <if test="orderEpayTime != null">
        order_epay_time = #{orderEpayTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.qut.entity.Orde">
    update orders
    set order_number = #{orderNumber,jdbcType=INTEGER},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      order_money = #{orderMoney,jdbcType=REAL},
      order_state = #{orderState,jdbcType=VARCHAR},
      customer_id = #{customerId,jdbcType=INTEGER},
      address = #{address,jdbcType=VARCHAR},
      store_id = #{storeId,jdbcType=INTEGER},
      order_epay_type = #{orderEpayType,jdbcType=VARCHAR},
      seller_id = #{sellerId,jdbcType=INTEGER},
      order_epay_time = #{orderEpayTime,jdbcType=TIMESTAMP}
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>

  <select id="findAllPage" parameterType="cn.edu.qut.entity.Orde" resultType="Orde">
   select order_id,DATE_FORMAT(order_time,'%Y-%m-%d %H:%i:%S') order_time2,customer.customer_id,customer_login_name,address,store_id,order_money,order_epay_type,DATE_FORMAT(order_epay_time,'%Y-%m-%d %H:%i:%S') order_epay_time,order_state from orders,customer where customer.customer_id= orders.customer_id and store_id=#{storeId}
  limit #{page},5;
  </select>
  <select id="selectCustomerName" parameterType="cn.edu.qut.entity.Orde" resultType="Orde">
  	  select order_id,DATE_FORMAT(order_time,'%Y-%m-%d %H:%i:%S') order_time2,customer.customer_id,customer_login_name,address,store_id,order_money,order_epay_type,DATE_FORMAT(order_epay_time,'%Y-%m-%d %H:%i:%S') order_epay_time,order_state from orders,customer where customer.customer_id= orders.customer_id and store_id=#{storeId} and customer_login_name like concat(concat("%",#{name},"%")) ;
</select>

  <select id="count" resultType="int" parameterType="cn.edu.qut.entity.Orde">
      select count(*) from orders where store_id=#{storeId};
 </select>
  <select id="selectId" parameterType="cn.edu.qut.entity.Orde" resultType="Orde">
	  select orders.order_id,DATE_FORMAT(order_time,'%Y-%m-%d %H:%i:%S') order_time2,customer.customer_id,customer_login_name,address,order_money,customer_login_name,goods_name,order_epay_type,order_state from orders,customer,goods,order_goods where orders.customer_id=customer.customer_id and goods.goods_id=order_goods.goods_id and orders.order_id=order_goods.order_id and orders.order_id=#{orderId} and orders.store_id=#{storeId};
  </select>
  <select id="findOrders" parameterType="cn.edu.qut.entity.Orde" resultType="Orde">
	select orders.order_id,DATE_FORMAT(order_time,'%Y-%m-%d %H:%i:%S') order_time2,customer.customer_id,customer_login_name,address,order_money,customer_login_name,goods_name,order_epay_type,order_state from orders,customer,goods,order_goods where orders.customer_id=customer.customer_id and goods.goods_id=order_goods.goods_id and orders.order_id=order_goods.order_id and orders.store_id=#{storeId}
  limit #{page},5;
  </select>

  <select id="query1" resultType="Orde" parameterType="cn.edu.qut.entity.Orde">
    select order_id,DATE_FORMAT(order_time,'%Y-%m-%d %H:%i:%S') order_time2,customer.customer_id,customer_login_name,address,store_id,order_money,order_epay_type,DATE_FORMAT(order_epay_time,'%Y-%m-%d %H:%i:%S') order_epay_time,order_state from orders,customer where customer.customer_id= orders.customer_id and store_id=#{storeId}
    </select>
</mapper>